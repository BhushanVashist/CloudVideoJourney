## ðŸ“˜ Docker Day 5 â€“ Networks (2 Sept)

### ðŸ”¹ Why Docker Networks?
- Containers are isolated, so Docker networks connect them for communication.
- Default network driver = **bridge**.

---

### ðŸ”¹ Common Network Drivers
1. **bridge (default)**
   - Each container gets its own IP inside the Docker network.
   - Containers can talk to each other by **name** if on the same network.

2. **host**
   - Shares host machineâ€™s network stack.
   - No isolation (container uses hostâ€™s IP).

3. **none**
   - Completely isolated, no networking.

---

### ðŸ”¹ Create a Custom Network
```bash
docker network create myNet
```

---

### ðŸ”¹ Run Containers in Same Network
```bash
docker run -dit --name contA --network myNet alpine sh
docker run -it --name contB --network myNet alpine sh
```

---

### ðŸ”¹ Test Communication
Inside `contB` shell:
```bash
ping contA
```
âœ… If both are in the same network â†’ `contB` can ping `contA`.

---

### ðŸ”¹ Flags Recap
- `-it` â†’ interactive terminal (keeps shell open).
- `-d` â†’ detached (runs in background).
- `--name` â†’ set container name.
- `--network` â†’ attach container to a custom network.
- `--rm` â†’ auto remove container after it exits.

---

### ðŸ”¹ Port Mapping Example
```bash
docker run -d -p 8080:80 nginx
```
- `8080:80` â†’ hostPort:containerPort
- Image name (nginx) always comes **last**.

---

âœ… **Key Point**: Image name always comes last in `docker run`.
